package utils

import (
	"fmt"
	"math/big"
	"portfolio/core/configs"
	Multicall "portfolio/core/contracts/MulticallContract"
	"portfolio/core/schema"

	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	log "github.com/sirupsen/logrus"
)

type BalanceCall struct {
	tokenAddress  common.Address
	walletAddress common.Address
}

type IndexedCall struct {
	index uint64
	call  Multicall.Multicall3Call3
}

const BALANCE_OF_FUNC = "70a08231"     //	balanceOf(address) ERC20
const NATIVE_BALANCE_FUNC = "4d2301cc" //getEthBalance(address) multiCall v3

// BalanceOf Uses ERC20 balanceOf
func BalanceOf(call BalanceCall) Multicall.Multicall3Call3 {
	return Multicall.Multicall3Call3{
		Target:       call.tokenAddress,
		AllowFailure: true,
		CallData:     common.Hex2Bytes(fmt.Sprintf("%s%s", BALANCE_OF_FUNC, call.walletAddress.Hash().String()[2:]))}
}

// NativeBalance Uses getEthBalance(address) method in multicall contract to get user's native balance
func NativeBalance(call BalanceCall) Multicall.Multicall3Call3 {
	return Multicall.Multicall3Call3{
		Target:       configs.MULTICALL_V3_ADDRESS,
		AllowFailure: true,
		CallData:     common.Hex2Bytes(fmt.Sprintf("%s%s", NATIVE_BALANCE_FUNC, call.walletAddress.Hash().String()[2:]))}
}

//  Generates calls for given tokens and wallets
func genGetMultipleBalanceCalls(tokens []common.Address, wallets []common.Address) []Multicall.Multicall3Call3 {
	res := make([]Multicall.Multicall3Call3, len(wallets)*len(tokens))
	counter := 0
	for _, token := range tokens {
		for _, wallet := range wallets {
			switch token {
			case configs.NATIVE_TOKEN_ADDRESS, configs.NULL_TOKEN_ADDRESS:
				res[counter] = NativeBalance(BalanceCall{tokenAddress: token, walletAddress: wallet})
			default:
				res[counter] = BalanceOf(BalanceCall{tokenAddress: token, walletAddress: wallet})
			}
			counter++
		}
	}
	return res
}

func genGetBalanceCalls(tokens []schema.Token, wallet common.Address) []IndexedCall {
	res := make([]IndexedCall, len(tokens))
	var counter uint64 = 0
	for _, token := range tokens {
		res[counter] = IndexedCall{counter, BalanceOf(BalanceCall{tokenAddress: token.Address, walletAddress: wallet})}
		counter++
	}
	return res
}

func GetBalances(
	multiCaller Multicall.MulticallCaller,
	tokens []common.Address,
	wallets []common.Address) [][]big.Int {

	calls := genGetMultipleBalanceCalls(tokens, wallets)
	callRes, err := multiCaller.Aggregate3(&bind.CallOpts{}, calls)

	if err != nil {
		log.Fatal(err)
		panic(err)
	}
	res := make([][]big.Int, len(wallets))
	var _res []big.Int
	i, j, tokenCount := 0, 0, len(tokens)

	for _, mr := range callRes {
		z := new(big.Int)
		z.SetBytes(mr.ReturnData)
		if j == 0 {
			_res = make([]big.Int, len(tokens))
		} else if j == tokenCount {
			j = 0
			res[i] = _res
		}
		i++
		j++
	}
	return res
}

func chunks[T any](array []T, chunkSize int) [][]T {
	steps := len(array) / chunkSize

	c := make([][]T, chunkSize)
	for i := 0; i < chunkSize; i++ {
		c[i] = array[(i * steps):((i + 1) * steps)]
	}
	return c
}

type chunkResult struct {
	index   uint64
	callRes Multicall.Multicall3Result
	err     any
}

func GetBalancesFaster(multiCaller Multicall.MulticallCaller, tokens []schema.Token, wallets common.Address) []schema.TokenBalance {

	allCalls := genGetBalanceCalls(tokens, wallets)
	tokenBalRes := make([]schema.TokenBalance, 1)

	chunkChannel := make(chan []chunkResult)

	chunkedCalls := chunks[IndexedCall](allCalls, 100)

	for _, indexCalls := range chunkedCalls {
		go func(indexCalls []IndexedCall, chunkChannel chan []chunkResult) {
			calls := make([]Multicall.Multicall3Call3, len(indexCalls))
			for i, indexedCall := range indexCalls {
				calls[i] = indexedCall.call
			}
			res, err := multiCaller.Aggregate3(&bind.CallOpts{}, calls)
			if err != nil {
				log.Error(err)
				chunkChannel <- nil
			} else {

				parsedRes := make([]chunkResult, len(indexCalls))

				for i, indexedCall := range indexCalls {
					parsedRes[i] = chunkResult{indexedCall.index, res[i], err}
				}
				chunkChannel <- parsedRes
			}
		}(indexCalls, chunkChannel)
	}

	//for i := 0; i < len(tokens); i++ {
	for i := 0; i < len(chunkedCalls); i++ {

		_tmp := <-chunkChannel
		if _tmp == nil {
			continue
		}
		for _, tmp := range _tmp {

			if tmp.callRes.Success {
				z := new(big.Int)
				z.SetBytes(tmp.callRes.ReturnData)
				if len(z.Bits()) == 0 {
					continue
				}
				badNum := new(big.Int)
				// NOTE - some contracts returns this output instead of 0 :/
				// https://etherscan.io/address/0xe9Cf7887b93150D4F2Da7dFc6D502B216438F244#readProxyContract
				// 0xf977814e90da44bfa03b6295a0616a897441acec @ balanceOf

				badNum.SetString("", 10)
				if z.Cmp(badNum) == 0 {
					continue
				}
				if tokens[tmp.index].Address == common.HexToAddress("0x34E89740adF97C3A9D3f63Cc2cE4a914382c230b") {
					log.Warn(z)
				}
				_token := tokens[tmp.index]
				// Token Balance
				decimal := configs.DecimalPowTen(_token.Decimals)
				t := new(big.Float).SetInt(z)
				t = t.Quo(t, new(big.Float).SetInt(decimal))

				tokenBalRes = append(tokenBalRes, schema.TokenBalance{
					Token:   _token,
					Balance: *t,
					//Value:   *(t.Mul(t, big.NewFloat(_token.Price))),
				})

			}
		}

	}
	return tokenBalRes
	// Sort Based on balance
	//ZERO := big.NewFloat(float64(0))
	//firstZeroIndex := 0
	//for i := 0; i < len(tokens); i++ {
	//	if tokens[i].Balance.Cmp(ZERO) <= 0 {
	//		firstZeroIndex = i
	//		break
	//	}
	//}
	//return tokens[:firstZeroIndex]
	//res := make([]big.Int, len(tokens))

	//
	//token
	//for i := 0; i < len(chunkedCalls); i++ {
	//	//
	//	for j, _res := range (<-chunkChannel).callRes {
	//		z := new(big.Int)
	//		z.SetBytes(_res.ReturnData)
	//		res[i+j].Balance= *z
	//	}
	//}

}
